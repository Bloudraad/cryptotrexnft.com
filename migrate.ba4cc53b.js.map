{"mappings":"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","sources":["js/migrate.js"],"sourcesContent":["import os from './contracts/ERC1155Test.json';\nimport ct from './contracts/CryptoTrex.json';\nimport { config } from './config';\nimport { loadWeb3, web3Address, switchChain } from './web3.js';\nimport Web3 from 'web3';\n\nasync function render(address, web3) {\n  const approved = await isApproved(web3, address);\n  if (approved) {\n    await renderItems(address, web3);\n  } else {\n    await renderApprovalPrompt();\n  }\n}\n\nasync function batchMigrate(ids) {\n  const web3 = await loadWeb3();\n  const address = await web3Address(web3);\n  const chainId = await web3.eth.getChainId();\n  let tokenIds = [];\n  ids.forEach((id) => {\n    tokenIds.push(web3.utils.toBN(id));\n  });\n  if (tokenIds.length < 1) return;\n  const c = new web3.eth.Contract(ct.abi, config[chainId].migration_address);\n  const batchMigrateBtn = document.getElementById('batchMigrateBtn');\n  c.methods\n    .migrateBatch(tokenIds)\n    .send({ from: address })\n    .on('receipt', () => {\n      batchMigrateBtn.disabled = true;\n      batchMigrateBtn.textContent = 'Migrated';\n      batchMigrateBtn.classList = 'nes-btn is-success';\n    })\n    .on('transactionHash', (hash) => {\n      batchMigrateBtn.textContent = 'Migrating...';\n      batchMigrateBtn.classList = 'nes-btn';\n      batchMigrateBtn.addEventListener('click', () => {\n        window.open(`https://etherscan.io/tx/${hash}`, '_blank').focus();\n      });\n    })\n    .on('error', () => {\n      batchMigrateBtn.disabled = true;\n      batchMigrateBtn.textContent = 'Failed';\n      batchMigrateBtn.classList = 'nes-btn is-error';\n    });\n}\n\nasync function isApproved(web3, address) {\n  const chainId = await web3.eth.getChainId();\n  const osc = new web3.eth.Contract(os.abi, config[chainId].origin_address);\n  return await osc.methods\n    .isApprovedForAll(address, config[chainId].migration_address)\n    .call({ from: address });\n}\n\nasync function approve() {\n  const web3 = await loadWeb3();\n  const address = await web3Address(web3);\n  const chainId = await web3.eth.getChainId();\n  const osc = new web3.eth.Contract(os.abi, config[chainId].origin_address);\n  osc.methods\n    .setApprovalForAll(config[chainId].migration_address, true)\n    .send({ from: address })\n    .on('receipt', () => {\n      const approveBtn = document.getElementById('approveBtn');\n      approveBtn.textContent = 'Approved';\n      approveBtn.disabled = true;\n      approveBtn.classList = 'btn btn-success is-disabled';\n      renderItems(address, web3);\n    })\n    .on('transactionHash', (hash) => {\n      const container = document.getElementById('approvalContainer');\n      const viewTx = document.createElement('a');\n      viewTx.classList = 'btn btn-info';\n      viewTx.href = `https://etherscan.io/tx/${hash}`;\n      viewTx.target = '_blank';\n      viewTx.text = 'View Transaction';\n      container.appendChild(viewTx);\n\n      const approveBtn = document.getElementById('approveBtn');\n      approveBtn.textContent = 'Approving...';\n      approveBtn.disabled = true;\n      approveBtn.classList = 'btn btn-primary';\n    });\n}\n\nasync function migrate(id, btn) {\n  const web3 = await loadWeb3();\n  const address = await web3Address(web3);\n  const chainId = await web3.eth.getChainId();\n  const tokenId = web3.utils.toBN(id);\n // Log the BigNumber value\n  console.log(\"Token ID BigNumber:\", tokenId.toString());\n\n  const c = new web3.eth.Contract(ct.abi, config[chainId].migration_address);\n  c.methods\n    .migrate(tokenId)\n    .send({ from: address })\n    .on('receipt', () => {\n      btn.disabled = true;\n      btn.classList = 'btn btn-success';\n      btn.textContent = 'Migrated';\n    })\n    .on('transactionHash', (hash) => {\n      btn.textContent = 'Migrating...';\n      btn.addEventListener('click', () => {\n        window.open(`https://etherscan.io/tx/${hash}`, '_blank').focus();\n      });\n    })\n    .on('error', () => {\n      btn.disabled = true;\n      btn.textContent = 'Failed';\n      btn.classList = 'btn btn-danger';\n    });\n}\n\nasync function addToken(eth) {\n  const web3 = await loadWeb3();\n  const chainId = await web3.eth.getChainId();\n\n  const tokenAddress = config[chainId].token_address;\n  const tokenSymbol = 'FOSSIL';\n  const tokenDecimals = 18;\n  const tokenImage =\n    'https://gateway.pinata.cloud/ipfs/QmZpPpnuASN7riY1UwVftSMowJAgMbf9x1k9pCaH5buSEQ';\n\n  try {\n    // wasAdded is a boolean. Like any RPC method, an error may be thrown.\n    await eth.request({\n      method: 'wallet_watchAsset',\n      params: {\n        type: 'ERC20', // Initially only supports ERC20, but eventually more!\n        options: {\n          address: tokenAddress, // The address that the token is at.\n          symbol: tokenSymbol, // A ticker symbol or shorthand, up to 5 chars.\n          decimals: tokenDecimals, // The number of decimals in the token\n          image: tokenImage, // A string url of the token logo\n        },\n      },\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\nlet itemIds = [];\n\nasync function getItems(ownerAddr, baseURL, contractAddr, collectionSlug) {\n  const url = `${baseURL}?owner=${ownerAddr}&contractAddresses[]=${[\n    contractAddr,\n  ]}&collection=${collectionSlug}`;\n   // Log the constructed URL\n  console.log(\"ownerAddr, baseURL, contractAddr, collectionSlug:\", url);\n  const res = await fetch(url);\n  const body = await res.json();\n  return body.ownedNfts.map((d) => {\n    if (d.contract.address.toLowerCase() === contractAddr.toLowerCase()) {\n      return d.id.tokenId;\n    }\n  });\n}\n\nasync function renderApprovalPrompt() {\n  const apprView = document.getElementById('approvalView');\n  const migrView = document.getElementById('migrationView');\n  apprView.hidden = false;\n  migrView.hidden = true;\n\n  const web3 = await loadWeb3();\n  const address = await web3Address(web3);\n  const chainId = await web3.eth.getChainId();\n  const v1 = await getItems(\n    address,\n    config[chainId].alchemy_api,\n    config[chainId].origin_address,\n    //config[chainId].collection_slug\n  );\n\n  if (v1.length < 1) {\n    const warning = document.getElementById('warningNoTrex');\n    warning.hidden = false;\n  }\n}\n\nasync function renderItems(address, web3) {\n  const apprView = document.getElementById('approvalView');\n  const migrView = document.getElementById('migrationView');\n  apprView.hidden = true;\n  migrView.hidden = false;\n  const chainId = await web3.eth.getChainId();\n\n  const v1 = await getItems(\n    address,\n    config[chainId].alchemy_api,\n    config[chainId].origin_address,\n    config[chainId].collection_slug // Pass collection_slug\n  );\n  const v2 = await getItems(\n    address,\n    config[chainId].alchemy_api,\n    config[chainId].migration_address,\n    config[chainId].collection_slug // Pass collection_slug\n  );\n\n  const list = document.querySelector('#card-list');\n  if (web3.currentProvider.isMetaMask) {\n    const addTokenBtn = document.getElementById('addTokenBtn');\n    addTokenBtn.hidden = false;\n  }\n\n  if (v1) {\n    if (v1.length < 1) {\n      const batchMigrateBtn = document.getElementById('batchMigrateBtn');\n      batchMigrateBtn.textContent = 'Nothing to migrate';\n      batchMigrateBtn.classList = 'btn btn-light is-disabled';\n      batchMigrateBtn.disabled = true;\n    }\n    const c = new web3.eth.Contract(os.abi, config[chainId].origin_address);\n    v1.forEach(async (e) => {\n      const options = {\n        method: 'GET',\n        headers: {\n          accept: 'application/json',\n          'x-api-key': config[chainId].opensea_api_key,\n        },\n      };\n\n      const url = `${config[chainId].opensea_api}/api/v2/chain/ethereum/contract/${config[chainId].migration_address}/nfts/${Web3.utils.toBN(e)}`; //nfts//\n      console.log(\"Constructed URLv1:\", url);\n      console.log(\"Headers:\", options.headers); // Logging headers to check if the API key is included\ntry {\n  const response = await fetch(url, options);\n  const body = await response.json(); // This is where body is defined\n // Log the entire body object to inspect its structure\n  console.log(\"API Response Body:\", body);\n  // The error seems to occur here when trying to access body\n  console.log(\"NFT Image URL:\", nft.image_url); // Log the NFT image URL\n  list.appendChild(buildCard(body, false));\n} catch (error) {\n  console.error(error);\n}  \n    });\n  }\n\n  if (v2) {\n    const options = {\n      method: 'GET',\n      headers: {\n        accept: 'application/json',\n        'x-api-key': config[chainId].opensea_api_key,\n      },\n    };\n\nv2.forEach(async (e) => {\n  const url = `${config[chainId].opensea_api}/api/v2/chain/ethereum/contract/${config[chainId].migration_address}/nfts/${Web3.utils.toBN(e)}`;\n  console.log(\"Constructed URL_v2:\", url);\n  console.log(\"Headers:\", options.headers); // Logging headers to check if the API key is included\ntry {\n  const response = await fetch(url, options);\n  const body = await response.json(); // This is where body is defined\n // Log the entire body object to inspect its structure\n  console.log(\"API Response Body:\", body);\n  // Log the NFT image URL and append to list\n//  console.log(\"NFT Image URL:\", e.nft.image_url); \n  list.appendChild(buildCard(body, true));\n} catch (error) {\n  console.error(error);\n}\n\n});\n  }\n}\n  \nfunction buildCard(e, migrated) {\n/*  // Check the structure of the object 'e'\n  console.log(\"Object 'e':\", e);\n  if (e && e.nft.image_url) {\n    // Access the image_url property if it exists\n    console.log(\"Image URL:\", e.nft.image_url);\n  } else {\n    console.error(\"Image URL not found in object 'e'\");\n  }\n  console.log(\"Building card for:\", e);*/\n  \n  const card = document.createElement('div');\n  card.classList = 'card';\n  card.style = `\n    margin: 4px;\n    background-color: #0a0a0a;\n    color: #fff;\n    border: 1px solid;\n    padding: 24px;\n    border-image-slice: 1;\n    border-image-source: linear-gradient(180deg, #d56730, #d5673041);`;\n  const imageContainer = document.createElement('a');\n  imageContainer.href = e.permalink;\n  imageContainer.target = '_blank';\n  const image = document.createElement('img');\n  image.onload = function() {\n  console.log(\"Image loaded successfully:\", image.src);\n};\n\nimage.onerror = function() {\n  console.error(\"Failed to load image:\", image.src);\n};\n\nimage.crossOrigin = 'anonymous';\nimage.classList = 'card-img-top';\nimageContainer.appendChild(image);\n    image.onload = function() {\n    console.log(\"Image loaded successfully:\", image.src);\n  };\n  image.onerror = function() {\n    console.error(\"Failed to load image:\", image.src);\n  };\n  image.src = e.nft.image_url;\n  image.crossOrigin = 'anonymous';\n  image.classList = 'card-img-top';\n  imageContainer.appendChild(image);\n  const bodyDiv = document.createElement('div');\n  bodyDiv.classList = 'card-body';\n  const nameDiv = document.createElement('h5');\n  nameDiv.classList.add('card-title');\n  nameDiv.textContent = e.name;\n  const migrateBtn = document.createElement('button');\n  migrateBtn.type = 'button';\n\n  if (!migrated) {\n    migrateBtn.classList = 'btn btn-secondary';\n    migrateBtn.style = 'font-weight: 800; width: 100%;';\n    migrateBtn.textContent = 'Migrate';\n  } else {\n    migrateBtn.classList = 'btn btn-light disabled';\n    migrateBtn.disabled = true;\n    migrateBtn.style = 'width: 100%';\n    migrateBtn.textContent = 'Migrated';\n  }\n  migrateBtn.addEventListener('click', () => migrate(e.token_id, migrateBtn));\n  card.appendChild(imageContainer);\n  bodyDiv.appendChild(nameDiv);\n  bodyDiv.appendChild(migrateBtn);\n  card.appendChild(bodyDiv);\n\n  const cardContainer = document.createElement('div');\n  cardContainer.classList.add('col-md-3', 'col-xs-6', 'pb-1');\n  cardContainer.appendChild(card);\n\n  return cardContainer;\n}\n\nconst batchMigrateBtn = document.getElementById('batchMigrateBtn');\nbatchMigrateBtn.addEventListener('click', async () => {\n  await batchMigrate(itemIds);\n});\n\nwindow.onload = async () => {\n  try {\n    const web3 = await loadWeb3();\n    const address = await web3Address(web3);\n    switchChain(window.ethereum);\n    render(address, web3);\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nconst addTokenBtn = document.getElementById('addTokenBtn');\naddTokenBtn.addEventListener('click', async () => {\n  await addToken(window.ethereum);\n});\n\nconst approveBtn = document.getElementById('approveBtn');\napproveBtn.addEventListener('click', async () => {\n  await approve();\n});\n"],"names":["$56cd91b74de0ab6d$var$render","address","web3","approved","chainId","eth","getChainId","osc","Contract","$parcel$interopDefault","$cSnus","abi","$71KSP","config","origin_address","methods","isApprovedForAll","migration_address","call","from","$56cd91b74de0ab6d$var$isApproved","$56cd91b74de0ab6d$var$renderItems","apprView","document","getElementById","migrView","hidden","$7VRcZ","loadWeb3","web3Address","$56cd91b74de0ab6d$var$getItems","alchemy_api","length","$56cd91b74de0ab6d$var$renderApprovalPrompt","$56cd91b74de0ab6d$var$itemIds","ownerAddr","baseURL","contractAddr","collectionSlug","url","console","log","res","fetch","json","ownedNfts","map","d","contract","toLowerCase","id","tokenId","v1","collection_slug","v2","list","querySelector","currentProvider","isMetaMask","batchMigrateBtn","textContent","classList","disabled","forEach","async","e","options","method","headers","accept","opensea_api_key","opensea_api","$6LYZy","utils","toBN","response","body","nft","image_url","appendChild","$56cd91b74de0ab6d$var$buildCard","error","migrated","card","createElement","style","imageContainer","href","permalink","target","image","onload","src","onerror","crossOrigin","bodyDiv","nameDiv","add","name","migrateBtn","type","addEventListener","btn","toString","$2tNqr","migrate","send","on","hash","window","open","focus","$56cd91b74de0ab6d$var$migrate","token_id","cardContainer","ids","tokenIds","push","c","migrateBatch","$56cd91b74de0ab6d$var$batchMigrate","switchChain","ethereum","err","tokenAddress","token_address","request","params","symbol","decimals","setApprovalForAll","approveBtn","container","viewTx","text"],"version":3,"file":"migrate.ba4cc53b.js.map"}